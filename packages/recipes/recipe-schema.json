{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "recipes": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/recipe"
      },
      "title": "Recipes",
      "description": "A list of recipes to apply to this package organized by the semver range for which the recipe applies.",
      "additionalItems": false
    },
    "recipe": {
      "type": "object",
      "required": [
        "semverRange"
      ],
      "properties": {
        "semverRange": {
          "type": "string",
          "title": "Semver Range",
          "description": "A range of package versions for which the recipe applies. Refer to https://github.com/npm/node-semver#ranges for how to construct semver ranges."
        },
        "srcRepo": {
          "$ref": "#/definitions/srcRepo",
          "title": "Source Repository",
          "description": "By default we will perform the build from the js located in the resolved node_modules package folder. When srcRepo is set to true we will use the package.json \"repository\" property to locate the source for the package. Otherwise, we'll utilize the properties in the srcRepo object to locate the source repository for this package."
        },
        "entrypoints": {
          "$ref": "#/definitions/entrypoints",
          "title": "Entrypoints",
          "description": "By default we'll use the package.json \"main\" property for the pkg entrypoints. If there is no \"main\" property, then we'll try \"./index.js\". Otherwise this can be set/overridden by the \"entrypoints\" property. Note that we are not using the \"browser\" property in the package.json because typically all the ES modules are compiled out of the browser module."
        },
        "srcIncludeGlob": {
          "type": "string",
          "title": "Source Include Glob",
          "description": "This is a glob that describes all the files to include in the javascript build from the package. By default this is \"**/*.{js,json}\", and can be overridden using the \"srcIncludeGlob\" property."
        },
        "srcIgnoreGlob": {
          "type": "string",
          "title": "Source Ignore Glob",
          "description": "This is a glob that describes all the files to ignore in the javascript build from the package. By default this is \"{node_modules,test}/**\", and can be overridden using the \"srcIgnoreGlob\" property."
        },
        "additionalDependencies": {
          "$ref": "#/definitions/additionalDependencies",
          "title": "Additional Dependencies",
          "description": "By default only the package.json's \"dependencies\" will be installed when processing a package. You may also specify additional dependencies, or override the package.json dependencies with the \"additionalDependencies\" property. This is helpful when the package author is relying on shadowed dependencies that are not explicitly specified, or you want to force a dependency to use a different version."
        },
        "skipDependencies": {
          "$ref": "#/definitions/skipDependencies",
          "title": "Skip Dependencies",
          "description": "In the scenario where a package has defined a dependency that it doesn't actually consume, it can be skipped by including it in the \"skipDependencies\" list. By default all the package.json \"dependencies\" will be processed."
        },
        "hoistSrc": {
          "type": "string",
          "title": "Hoist Source",
          "description": "By default the resulting bundle that is created for the package will have the same relative folder path as the entrypoint js file. So if the entrypoint js files lives in \"<pkg root>/src/index.js\", the resulting bundle for the package will reside at <pkg URL>/src/index.js. The entrypoints for the package may be hoisted by specifying the folder to hoist the root using the \"hoistSrc\". Set the \"hoistSrc\" property to the folder that you wish to hoist to the root of the package. For instance, if the entrypoint file lives in <pkg root>/src/index.js, and you which to have bundles that are created that are placed as direct children of the pkg URL, then set the \"hoistSrc\" to \"src/\". Note that the entrypoints.json should point to the hoisted entrypoints file."
        }
      },
      "additionalProperties": false
    },
    "srcRepo": {
      "type": [
        "object",
        "boolean"
      ],
      "properties": {
        "repoHref": {
          "type": "string",
          "format": "uri",
          "title": "Repo HREF",
          "description": "By default we'll use the package.json \"repository\" property for the pkg source. Otherwise it can be specified here."
        },
        "version": {
          "type": "string",
          "title": "Version",
          "description": "By default we'll use the package.json \"version\" property to checkout the package source from git. This can be overridden with a specific branch/tag/SHA by setting the version property. The version string supports semver replacement tags, \"$major$\", \"$minor$\", and \"$patch$\". So if you want to checkout a tag that that simply has a prefix or suffix added to the version, you can use replacements tags. For instance if the current version of the package is \"3.12.4\", and you want to check out tag \"3.12.4_es\", you can specify:\n  $major$.$minor$.$patch$_es\nor to prefix a \"v\" in front of the version (which is a common practice):\n  v$major$.$minor$.$patch$",
          "default": "v$major$.$minor$.$patch$"
        },
        "subdir": {
          "type": "string",
          "title": "Subdirectory",
          "description": "When the repo is actually a mono repo, the package is located in a subdirectory of the repository. By default this will attempted to be derived from the package.json \"repository\" property by using the part of the repository path that appears after the ../tree/branch_name/ part of the path. This can be overridden by setting the subdir property."
        }
      },
      "additionalProperties": false
    },
    "entrypoints": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string"
      },
      "additionalItems": false
    },
    "additionalDependencies": {
      "type": "object",
      "minItems": 1,
      "additionalProperties": {
        "type": "string"
      }
    },
    "skipDependencies": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string"
      },
      "additionalItems": false
    }
  },
  "type": "object",
  "additionalItems": false,
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri-reference"
    },
    "recipes": {
      "$ref": "#/definitions/recipes"
    }
  }
}