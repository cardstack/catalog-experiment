import { default as baseAssignValue } from "./dist/56.js";
import { default as baseForOwn } from "./dist/77.js";
import { default as baseIteratee } from "./dist/6.js";




/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */

function mapKeys(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);
  baseForOwn(object, function (value, key, object) {
    baseAssignValue(result, iteratee(value, key, object), value);
  });
  return result;
}

const _default = (mapKeys);
export { _default as default };
/*====catalogjs annotation start====
lZOTwqwuL2Rpc3QvNTYuanMBk8KsLi9kaXN0Lzc3LmpzBZPCqy4vZGlzdC82LmpzCYGnZGVmYXVsdJShbKhfZGVmYXVsdBTAkZMUwMKFr2Jhc2VBc3NpZ25WYWx1ZZuhaZDCAsCSAwTAAMCnZGVmYXVsdJCqYmFzZUZvck93bpuhaZDCBsCSBwjAAcCnZGVmYXVsdJCsYmFzZUl0ZXJhdGVlm6FpkMIKwJILDMACwKdkZWZhdWx0kKdtYXBLZXlzm6Fsk6xiYXNlSXRlcmF0ZWWqYmFzZUZvck93bq9iYXNlQXNzaWduVmFsdWXCDcCSDg/AwMDAkKhfZGVmYXVsdJuhbJGnbWFwS2V5c8IRwJISE8DAwMCQ3AAVlgAAAcDCw5YAFwIFwsKWCQADwMLClgsPwMDCwpYtD8DAwsKWARcGCcLClgkAB8DCwpYLCsDAwsKWEQrABMLClgEWCg3CwpYJAAvAwsKWCwzAwMLCljUMwAjCwpbNArRHDhDCwpYJB8AMwsKWBAfAwMLClgIBERTCwpYGARLAwsKWAAjAD8LClgkIwMDCwpYBDhPAwsI=
====catalogjs annotation end====*/